{"version":3,"sources":["components/submitForm/ModeSelect.js","components/submitForm/NameInput.js","components/gameField/GameField.js","redux/types.js","redux/actionCreators.js","redux/operations.js","components/submitForm/SubmitForm.js","components/winnerMsg/WinnerMsg.js","components/leaderBoard/LeaderBoard.js","components/App.js","redux/reducers.js","redux/store.js","index.js","components/App.module.css","components/submitForm/styles/submitForm.module.css","components/gameField/GameField.module.css","components/leaderBoard/LeaderBoard.module.css","components/submitForm/styles/animation.module.css","components/winnerMsg/WinnerMsg.module.css"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","ModeSelect","classes","React","useState","mode","setMode","FormControl","className","InputLabel","htmlFor","Select","native","value","onChange","event","target","name","aria-label","NameInput","Grid","container","alignItems","item","TextField","label","intervalId","fetchGameMode","type","Type","getCurrentDate","currentDate","Date","month","getMonth","date","getDate","year","getFullYear","hours","getHours","minutes","getMinutes","sendWinnerToServer","winner","a","winnerObj","axios","post","StyledButton","styled","Button","background","color","height","padding","SubmitForm","state","showErr","handleSubmit","e","props","getGameSettings","setUserName","resetState","preventDefault","currentTarget","elements","setState","setTimeout","this","isGameOn","onSubmit","style","submitForm","variant","CSSTransition","in","timeout","classNames","animation","unmountOnExit","error","Component","connect","appReducer","mainReducer","dispatch","get","key","response","data","field","delay","blue","GameField","width","fillArray","blocksNum","setWidth","undefined","clearInterval","setInterval","makeRandomBlockBlue","makeBlockRed","prevProps","prevState","user","arr","points","readyToCheckWinner","makeBlue","randomNum","Math","round","random","length","bgColor","areAllBlocksPainted","makeRed","addPcPoint","forEach","el","id","makeGreen","addUserPoint","backgroundColor","Number","dataset","endGame","every","checkWinner","pc","boundMakeGreen","makeBlockGreen","bind","onClick","styles","fieldContainer","map","fieldBlock","data-id","fieldBlocksNum","blocksReducer","userReducer","pcReducer","num","resultArray","i","block","push","fiftyPercent","winnerContainer","isWinner","LeaderBoard","getWinners","winnersHdr","List","winnersList","winners","ListItem","ListItemAvatar","Avatar","toUpperCase","ListItemText","primary","secondary","leaderBoardReducer","mainContainer","gameSection","leadersSection","INIT_STATE","INIT_USER","INIT_PC","combinedReducer","combineReducers","action","targetObj","find","obj","Object","assign","rootReducer","middlewares","thunk","enhancer","composeWithDevTools","applyMiddleware","store","createStore","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.99443045.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 136\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nexport default function ModeSelect() {\r\n  const classes = useStyles();\r\n  const [mode, setMode] = React.useState('');\r\n\r\n  const handleChange = event => {\r\n    setMode(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel htmlFor='age-native-simple'>Game mode</InputLabel>\r\n        <Select native value={mode} onChange={handleChange} name='mode'>\r\n          <option aria-label='None' value='' />\r\n          <option value='easyMode'>Easy</option>\r\n          <option value='normalMode'>Normal</option>\r\n          <option value='hardMode'>Hard</option>\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 136\r\n  }\r\n}));\r\n\r\nexport default function NameInput() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.margin}>\r\n      <Grid container spacing={1} alignItems='flex-end'>\r\n        <Grid item>\r\n          <AccountCircle />\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField name='name' label='Enter your name' />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport styles from './GameField.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { fillArray, checkWinner } from '../../redux/operations';\r\nimport {\r\n  makeBlue,\r\n  makeRed,\r\n  makeGreen,\r\n  addUserPoint,\r\n  addPcPoint,\r\n  endGame\r\n} from '../../redux/actionCreators';\r\nconst blue = 'rgb(0, 102, 255)';\r\nconst green = 'rgb(0, 204, 0)';\r\nconst red = 'rgb(255, 26, 26)';\r\nlet intervalId;\r\n\r\nclass GameField extends Component {\r\n  state = {\r\n    width: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { fillArray, blocksNum, delay, isGameOn } = this.props;\r\n    this.setWidth();\r\n    fillArray(blocksNum);\r\n\r\n    if (intervalId !== undefined) {\r\n      clearInterval(intervalId);\r\n    }\r\n    intervalId = setInterval(() => {\r\n      this.makeRandomBlockBlue();\r\n      this.makeBlockRed();\r\n    }, delay);\r\n    !isGameOn && clearInterval(intervalId);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { user, arr } = this.props;\r\n    if (prevProps.user.points !== user.points) {\r\n      this.readyToCheckWinner(arr);\r\n    }\r\n  }\r\n\r\n  makeRandomBlockBlue() {\r\n    const { arr, makeBlue, isGameOn } = this.props;\r\n    const randomNum = Math.round(Math.random() * (arr.length - 1));\r\n    if (arr[randomNum].bgColor === '') {\r\n      makeBlue(randomNum);\r\n    } else {\r\n      isGameOn && this.makeRandomBlockBlue();\r\n    }\r\n    this.areAllBlocksPainted(arr);\r\n  }\r\n\r\n  makeBlockRed() {\r\n    const { arr, delay, makeRed, addPcPoint } = this.props;\r\n    arr.forEach(el => {\r\n      if (el.bgColor === green || el.bgColor === '') {\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        if (el.bgColor === blue) {\r\n          addPcPoint();\r\n          makeRed(el.id);\r\n          this.readyToCheckWinner(arr);\r\n        }\r\n      }, delay);\r\n    });\r\n  }\r\n\r\n  makeBlockGreen(e) {\r\n    const { makeGreen, addUserPoint } = this.props;\r\n    if (e.target.style.backgroundColor === blue) {\r\n      addUserPoint();\r\n      makeGreen(Number(e.target.dataset.id));\r\n    }\r\n  }\r\n\r\n  areAllBlocksPainted(arr) {\r\n    const { endGame, isGameOn } = this.props;\r\n    if (arr.every(el => el.bgColor !== '')) {\r\n      isGameOn && endGame();\r\n    }\r\n  }\r\n\r\n  readyToCheckWinner(arr) {\r\n    const { checkWinner, blocksNum, user, pc } = this.props;\r\n    if (arr.every(el => el.bgColor === green || el.bgColor === red)) {\r\n      checkWinner(blocksNum, user, pc);\r\n    }\r\n  }\r\n\r\n  setWidth() {\r\n    if (this.props.blocksNum === 25) {\r\n      this.setState({\r\n        width: '250px'\r\n      });\r\n    } else if (this.props.blocksNum === 100) {\r\n      this.setState({\r\n        width: '500px'\r\n      });\r\n    } else {\r\n      this.setState({\r\n        width: '750px'\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { width } = this.state;\r\n    const boundMakeGreen = this.makeBlockGreen.bind(this);\r\n    return (\r\n      <div\r\n        onClick={boundMakeGreen}\r\n        className={styles.fieldContainer}\r\n        style={{ width: width }}\r\n      >\r\n        {this.props.arr.map(({ id, bgColor }) => (\r\n          <div\r\n            style={{ backgroundColor: bgColor }}\r\n            className={styles.fieldBlock}\r\n            key={id}\r\n            data-id={id}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  blocksNum: state.appReducer.mainReducer.fieldBlocksNum,\r\n  arr: state.appReducer.blocksReducer,\r\n  delay: state.appReducer.mainReducer.delay,\r\n  user: state.appReducer.userReducer,\r\n  pc: state.appReducer.pcReducer,\r\n  isGameOn: state.appReducer.mainReducer.isGameOn\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  fillArray,\r\n  makeBlue,\r\n  makeRed,\r\n  makeGreen,\r\n  addUserPoint,\r\n  addPcPoint,\r\n  checkWinner,\r\n  endGame\r\n})(GameField);\r\n","export default {\r\n  GET_GAME_MODE: 'GET_GAME_MODE',\r\n  GET_GAME_DELAY: 'GET_GAME_DELAY',\r\n  SET_USERNAME: 'SET_USERNAME',\r\n  FILL_ARRAY: 'FILL_ARRAY',\r\n  MAKE_BLUE: 'MAKE_BLUE',\r\n  MAKE_RED: 'MAKE_RED',\r\n  MAKE_GREEN: 'MAKE_GREEN',\r\n  ADD_USER_POINT: 'ADD_USER_POINT',\r\n  ADD_PC_POINT: 'ADD_PC_POINT',\r\n  USER_WINS: 'USER_WINS',\r\n  PC_WINS: 'PC_WINS',\r\n  END_GAME: 'END_GAME',\r\n  RESET_STATE: 'RESET_STATE',\r\n  GET_WINNERS: 'GET_WINNERS'\r\n};\r\n","import Type from './types';\r\n\r\nexport const fetchGameMode = mode => ({\r\n  type: Type.GET_GAME_MODE,\r\n  mode\r\n});\r\n\r\nexport const fetchGameDelay = delay => ({\r\n  type: Type.GET_GAME_DELAY,\r\n  delay\r\n});\r\n\r\nexport const setUserName = name => ({\r\n  type: Type.SET_USERNAME,\r\n  name\r\n});\r\n\r\nexport const fillArrWithBlocks = arr => ({\r\n  type: Type.FILL_ARRAY,\r\n  arr\r\n});\r\n\r\nexport const makeBlue = id => ({\r\n  type: Type.MAKE_BLUE,\r\n  id\r\n});\r\n\r\nexport const makeRed = id => ({\r\n  type: Type.MAKE_RED,\r\n  id\r\n});\r\n\r\nexport const makeGreen = id => ({\r\n  type: Type.MAKE_GREEN,\r\n  id\r\n});\r\n\r\nexport const addUserPoint = () => ({\r\n  type: Type.ADD_USER_POINT\r\n});\r\n\r\nexport const addPcPoint = () => ({\r\n  type: Type.ADD_PC_POINT\r\n});\r\n\r\nexport const userWins = () => ({\r\n  type: Type.USER_WINS\r\n});\r\n\r\nexport const pcWins = () => ({\r\n  type: Type.PC_WINS\r\n});\r\n\r\nexport const endGame = () => ({\r\n  type: Type.END_GAME\r\n});\r\n\r\nexport const resetState = () => ({\r\n  type: Type.RESET_STATE\r\n});\r\n\r\nexport const fetchWinners = winners => ({\r\n  type: Type.GET_WINNERS,\r\n  winners\r\n});\r\n","import axios from 'axios';\r\nimport {\r\n  fetchGameMode,\r\n  fetchGameDelay,\r\n  fillArrWithBlocks,\r\n  userWins,\r\n  pcWins,\r\n  fetchWinners\r\n} from './actionCreators';\r\n\r\nexport const getGameSettings = mode => async dispatch => {\r\n  const response = await axios.get(\r\n    'https://starnavi-frontend-test-task.herokuapp.com/game-settings'\r\n  );\r\n  for (let key in response.data) {\r\n    if (key === mode) {\r\n      dispatch(fetchGameMode(response.data[key].field));\r\n      dispatch(fetchGameDelay(response.data[key].delay));\r\n    }\r\n  }\r\n};\r\n\r\nexport const fillArray = num => dispatch => {\r\n  const resultArray = [];\r\n  for (let i = 0; i < num; i += 1) {\r\n    const block = {\r\n      id: i,\r\n      bgColor: ''\r\n    };\r\n    resultArray.push(block);\r\n  }\r\n  dispatch(fillArrWithBlocks(resultArray));\r\n};\r\n\r\nconst getCurrentDate = () => {\r\n  const currentDate = new Date();\r\n  const months = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n  ];\r\n  const monthNum = currentDate.getMonth();\r\n  const month = months[monthNum];\r\n  let date = currentDate.getDate();\r\n  const year = currentDate.getFullYear();\r\n  let hours = currentDate.getHours();\r\n  let minutes = currentDate.getMinutes();\r\n\r\n  date = date < 10 ? '0' + date : date;\r\n  hours = hours < 10 ? '0' + hours : hours;\r\n  minutes = minutes < 10 ? '0' + minutes : minutes;\r\n\r\n  return `${hours}:${minutes} — ${month} ${date}, ${year}`;\r\n};\r\n\r\nconst sendWinnerToServer = async winner => {\r\n  const winnerObj = {\r\n    winner,\r\n    date: getCurrentDate()\r\n  };\r\n  await axios.post(\r\n    'https://starnavi-frontend-test-task.herokuapp.com/winners',\r\n    winnerObj\r\n  );\r\n};\r\n\r\nexport const checkWinner = (blocksNum, user, pc) => dispatch => {\r\n  const fiftyPercent = blocksNum * 0.5;\r\n  if (user.points > fiftyPercent) {\r\n    dispatch(userWins());\r\n    sendWinnerToServer(user.name);\r\n  } else if (pc.points > fiftyPercent) {\r\n    dispatch(pcWins());\r\n    sendWinnerToServer(pc.name);\r\n  }\r\n};\r\n\r\nexport const getWinners = () => async dispatch => {\r\n  const response = await axios.get(\r\n    'https://starnavi-frontend-test-task.herokuapp.com/winners'\r\n  );\r\n  dispatch(fetchWinners(response.data));\r\n};\r\n","import React, { Component } from 'react';\r\nimport ModeSelect from './ModeSelect';\r\nimport NameInput from './NameInput';\r\nimport Button from '@material-ui/core/Button';\r\nimport style from './styles/submitForm.module.css';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport animation from './styles/animation.module.css';\r\nimport { getGameSettings } from '../../redux/operations';\r\nimport { connect } from 'react-redux';\r\nimport { setUserName, resetState } from '../../redux/actionCreators';\r\n\r\nconst StyledButton = styled(Button)({\r\n  background: 'linear-gradient(45deg, #474747 30%, #808080 90%)',\r\n  color: 'white',\r\n  height: 40,\r\n  padding: '0 30px',\r\n  marginTop: '8px'\r\n});\r\n\r\nclass SubmitForm extends Component {\r\n  state = {\r\n    showErr: false\r\n  };\r\n\r\n  handleSubmit = async e => {\r\n    const { getGameSettings, setUserName, resetState } = this.props;\r\n    e.preventDefault();\r\n    resetState();\r\n    const mode = e.currentTarget.elements.mode.value;\r\n    const name = e.currentTarget.elements.name.value;\r\n    if (mode === '' || name === '') {\r\n      this.setState({ showErr: true });\r\n      setTimeout(() => {\r\n        this.setState({ showErr: false });\r\n      }, 2500);\r\n      return;\r\n    }\r\n    getGameSettings(mode);\r\n    setUserName(name);\r\n  };\r\n\r\n  render() {\r\n    const { showErr } = this.state;\r\n    const { isGameOn } = this.props;\r\n    return (\r\n      <>\r\n        <form onSubmit={this.handleSubmit} className={style.submitForm}>\r\n          <ModeSelect />\r\n          <NameInput />\r\n          <StyledButton type='submit' variant='contained'>\r\n            {isGameOn ? 'Play' : 'Play again'}\r\n          </StyledButton>\r\n        </form>\r\n        <CSSTransition\r\n          in={showErr}\r\n          timeout={300}\r\n          classNames={animation}\r\n          unmountOnExit\r\n        >\r\n          <div className={style.error}>\r\n            Please choose the game mode and enter your name!\r\n          </div>\r\n        </CSSTransition>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isGameOn: state.appReducer.mainReducer.isGameOn\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getGameSettings,\r\n  setUserName,\r\n  resetState\r\n})(SubmitForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport style from './WinnerMsg.module.css';\r\n\r\nconst WinnerMsg = ({ user, pc }) => (\r\n  <div className={style.winnerContainer}>\r\n    {user.isWinner ? user.name : pc.name} wins!\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  user: state.appReducer.userReducer,\r\n  pc: state.appReducer.pcReducer\r\n});\r\n\r\nexport default connect(mapStateToProps)(WinnerMsg);\r\n","import React, { Component } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport style from './LeaderBoard.module.css';\r\nimport { connect } from 'react-redux';\r\nimport { getWinners } from '../../redux/operations';\r\n\r\nclass LeaderBoard extends Component {\r\n  componentDidMount() {\r\n    this.props.getWinners();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2 className={style.winnersHdr}>Leader Board</h2>\r\n        <List className={style.winnersList}>\r\n          {this.props.winners.map(({ winner, date, id }) => (\r\n            <ListItem key={id}>\r\n              <ListItemAvatar>\r\n                <Avatar>{winner[0].toUpperCase()}</Avatar>\r\n              </ListItemAvatar>\r\n              <ListItemText primary={winner} secondary={date} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  winners: state.leaderBoardReducer\r\n});\r\n\r\nexport default connect(mapStateToProps, { getWinners })(LeaderBoard);\r\n","import React from 'react';\r\nimport SubmitForm from './submitForm/SubmitForm';\r\nimport GameField from './gameField/GameField';\r\nimport { connect } from 'react-redux';\r\nimport style from './App.module.css';\r\nimport WinnerMsg from './winnerMsg/WinnerMsg';\r\nimport LeaderBoard from './leaderBoard/LeaderBoard';\r\n\r\nconst App = ({ blocksNum, delay, user, pc }) => (\r\n  <div className={style.mainContainer}>\r\n    <section className={style.gameSection}>\r\n      <SubmitForm />\r\n      {(user.isWinner || pc.isWinner) && <WinnerMsg />}\r\n      {blocksNum > 0 && delay > 0 && <GameField />}\r\n    </section>\r\n\r\n    <section className={style.leadersSection}>\r\n      <LeaderBoard />\r\n    </section>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  blocksNum: state.appReducer.mainReducer.fieldBlocksNum,\r\n  delay: state.appReducer.mainReducer.delay,\r\n  user: state.appReducer.userReducer,\r\n  pc: state.appReducer.pcReducer\r\n});\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import Type from './types';\r\nimport { combineReducers } from 'redux';\r\nconst blue = 'rgb(0, 102, 255)';\r\nconst red = 'rgb(255, 26, 26)';\r\nconst green = 'rgb(0, 204, 0)';\r\n\r\nconst INIT_STATE = {\r\n  fieldBlocksNum: 0,\r\n  delay: 0,\r\n  isGameOn: true\r\n};\r\n\r\nconst mainReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case Type.GET_GAME_MODE:\r\n      return { ...state, fieldBlocksNum: action.mode * action.mode };\r\n    case Type.GET_GAME_DELAY:\r\n      return { ...state, delay: action.delay };\r\n    case Type.END_GAME:\r\n      return { ...state, isGameOn: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst blocksReducer = (state = [], action) => {\r\n  const targetObj = state.find(obj => obj.id === action.id);\r\n  switch (action.type) {\r\n    case Type.FILL_ARRAY:\r\n      return action.arr;\r\n    case Type.MAKE_BLUE:\r\n      targetObj.bgColor = blue;\r\n      return Object.assign([], state, { [action.id]: targetObj });\r\n    case Type.MAKE_RED:\r\n      targetObj.bgColor = red;\r\n      return Object.assign([], state, { [action.id]: targetObj });\r\n    case Type.MAKE_GREEN:\r\n      targetObj.bgColor = green;\r\n      return Object.assign([], state, { [action.id]: targetObj });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst INIT_USER = {\r\n  name: '',\r\n  points: 0,\r\n  isWinner: false\r\n};\r\n\r\nconst userReducer = (state = INIT_USER, action) => {\r\n  switch (action.type) {\r\n    case Type.SET_USERNAME:\r\n      return { ...state, name: action.name };\r\n    case Type.ADD_USER_POINT:\r\n      return { ...state, points: state.points + 1 };\r\n    case Type.USER_WINS:\r\n      return { ...state, isWinner: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst INIT_PC = {\r\n  name: 'Computer',\r\n  points: 0,\r\n  isWinner: false\r\n};\r\n\r\nconst pcReducer = (state = INIT_PC, action) => {\r\n  switch (action.type) {\r\n    case Type.ADD_PC_POINT:\r\n      return { ...state, points: state.points + 1 };\r\n    case Type.PC_WINS:\r\n      return { ...state, isWinner: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const leaderBoardReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case Type.GET_WINNERS:\r\n      return action.winners;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const combinedReducer = combineReducers({\r\n  mainReducer,\r\n  blocksReducer,\r\n  userReducer,\r\n  pcReducer\r\n});\r\n\r\nexport const appReducer = (state, action) => {\r\n  if (action.type === Type.RESET_STATE) {\r\n    state = undefined;\r\n  }\r\n  return combinedReducer(state, action);\r\n};\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { appReducer, leaderBoardReducer } from './reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n  appReducer,\r\n  leaderBoardReducer\r\n});\r\n\r\nconst middlewares = [thunk];\r\nconst enhancer = composeWithDevTools(applyMiddleware(...middlewares));\r\nexport const store = createStore(rootReducer, enhancer);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App';\r\nimport './index.css';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"App_mainContainer__1_6lC\",\"gameSection\":\"App_gameSection__1udFC\",\"leadersSection\":\"App_leadersSection__3f2R9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submitForm\":\"submitForm_submitForm__1OgQV\",\"error\":\"submitForm_error__38GQG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldContainer\":\"GameField_fieldContainer__1O0ag\",\"fieldBlock\":\"GameField_fieldBlock__V4NfP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"winnersList\":\"LeaderBoard_winnersList__66yOD\",\"winnersHdr\":\"LeaderBoard_winnersHdr__1YHvW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"animation_enter__1Bv-j\",\"enterActive\":\"animation_enterActive__1KfhM\",\"exit\":\"animation_exit__17wac\",\"exitActive\":\"animation_exitActive__1Tp5S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"winnerContainer\":\"WinnerMsg_winnerContainer__3hM47\"};"],"sourceRoot":""}